#!/bin/bash 

. docsh.ini

# Embedded sets of text 
# I find that this is a clean way to store and 
# print blocks of text.  The 'embedded' function 
# reads from the code blocks below by greping 
# this entire script 
# One benefit of this is that blocks of text can 
# be formatted in one place and then called in 
# another place while stilling using indention 
# within the code. 

THIS=$0

##UUsage: You must specify a file name starting with z, ex: z3

##Vvi editor not supported in this environment

##0<!---- Begin code snippet ---->
##0<div class=spacing>
##0  <pre>

##1  </pre>
##1</div>
##1
##1<!---- End code snippet ---->

function embedded { #- By grepping $0, or $THIS, this script looks at itself 
    #- and reads out lines starting with '##N' 
    #- this function acts as a filter 

grep "^##$1" $THIS |  cut -c 4-

} 

PRELEN=90
DEST=/tmp/$$.dest
MIDDLE=/tmp/$$.middle
FINAL=/tmp/$$.final

embedded 0 > $FINAL # Begin Wrapper Code

echo "Start Scripting (type exit to quit)"

changefont yellow 

script -c "bash --rcfile $DOCBIN/pre.rc" $DEST

sed 's/\[/~~[[/g' $DEST | sed -f $DOCBIN/tty-to-html.sed >> $MIDDLE

cat "$MIDDLE" | while read LINE
	do
	echo $LINE | grep "prompt" >/dev/null
	if [[ $? -eq 0 ]]
		then
		echo "$LINE </span>" 
		else
		echo "$LINE"
		fi >> $FINAL
	done

embedded 1 >> $FINAL # End Wrapper Code
scp $FINAL $URI/$THISPAGE-$THISSECTION.php

PS1="$OLDPS1"
changefont white

rm /tmp/$$.* 

